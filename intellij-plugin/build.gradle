buildscript {
    ext {
        kotlinVersion = '1.3.61'
    }
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'org.jetbrains.intellij:org.jetbrains.intellij.gradle.plugin:0.4.15'

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"

        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'

    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }
}


apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.intellij'


group = 'com.guet.flexbox'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlinVersion}"

    implementation 'com.google.zxing:core:3.4.0'

    implementation project(':el')

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

intellij {
    version '2019.3.1'
    plugins = ['java']
}

private Task findTask(String projectName, String taskName) {
    return project(projectName).getTasksByName(taskName, false)
            .first()
}

private Collection<File> collectOutput(String projectName, String taskName) {
    return findTask(projectName, taskName)
            .outputs
            .files
            .files
}

task copyJar(
        type: Copy
) {
    println(buildDir)
    File dest = new File(buildDir, "/resources/main/bin")
    def old = dest.listFiles()
    if (old != null && old.size() > 0) {
        Arrays.stream(old).forEach({
            file ->
                file.delete()
        })
    }
    List<File> files = new ArrayList<File>()
    files.addAll(collectOutput(":compiler", "shadowJar"))
    files.addAll(collectOutput(":mock-service", "bootJar"))
    from(files)
    into(dest)
}

copyJar.dependsOn([
        findTask(":compiler", "shadowJar"),
        findTask(":mock-service", "bootJar")
])

buildPlugin.dependsOn(copyJar)
