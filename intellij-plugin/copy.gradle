private Task findTask(String projectName, String taskName) {
    return project(projectName).getTasksByName(taskName, false)
            .first()
}

private static Collection<File> collectTaskOutput(Task task) {
    return task.outputs
            .files
            .files
}


def compilerJarTask = findTask(":compiler", "shadowJar")
def mockJarTask = findTask(":handshake", "bootJar")

task copyJar(
        type: Copy
) {
    File dest = new File(buildDir, "/resources/main/bin")
    def old = dest.listFiles()
    if (old != null && old.size() > 0) {
        Arrays.stream(old).forEach({
            file ->
                file.delete()
        })
    }
    List<File> files = new ArrayList<File>()
    files.addAll(collectTaskOutput(compilerJarTask))
    files.addAll(collectTaskOutput(mockJarTask))
    from(files)
    into(dest)
}

copyJar.dependsOn([
        compilerJarTask,
        mockJarTask
])

jar.dependsOn(copyJar)